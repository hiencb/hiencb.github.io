{"version":3,"sources":["dataView.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","angular","module","constant","_","cbDataArray","template","controller","DataArrayController","replace","scope","array","$scope","dataViewService","dvs","directive","$inject","cbDataLinkObject","DataLinkObjectController","object","cbDataLinkString","DataLinkStringController","string","cbDataNode","DataNodeController","data","cbDataObject","DataObjectController","cbDataValue","DataValueController","cbDataView","_typeof","Symbol","iterator","constructor","prototype","DataViewServiceProvider","lodash","dataViewServiceFactory","nextId","ids","lastId","typeOf","item","undefined","isArray","length","isObject","settings","linkChecker","isString","svc","className","element","classes","normalize","normalizer","isLink","getLink","linkGetter","getLinkObject","linkObjectGetter","keyValueSeparator","keyValueSeperator","isPrimitive","isDefined","isEmptyArray","isOccupiedArray","getSet","prop","arguments","_settings","prd","this","_classes","array-list","array-list-item","array-list-item-link","link-object","link-string","object-key","object-list","object-list-item","panel-group","panel-item","panel-heading","panel-title","panel-title-link","panel-collapse","value-item","o","startCase","toString","name","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","_iterator","keys","next","done","err","return","$get","provider"],"mappings":"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","file":"dataView.min.js","sourcesContent":["'use strict';\n\n// ReSharper disable UndeclaredGlobalVariableUsing\n(function () {\n  'use strict';\n\n  angular.module('cb.dataView', []);\n})();\n'use strict';\n\n// ReSharper disable UndeclaredGlobalVariableUsing\n(function () {\n  'use strict';\n\n  angular.module('cb.dataView').constant('lodash', _);\n})();\n'use strict';\n\n// ReSharper disable UndeclaredGlobalVariableUsing\n(function () {\n  'use strict';\n\n  angular.module('cb.dataView').directive('cbDataArray', cbDataArray);\n\n  cbDataArray.$inject = [];\n  function cbDataArray() {\n    var template = '\\n<div ng-class=\"dvs.className(\\'array-list\\')\" debug=\"cb-data-array\">\\n  <a ng-repeat-start=\"item in array track by $index\" ng-if=\"dvs.typeOf(item) === \\'link-string\\'\" ng-class=\"dvs.className(\\'array-list-item-link\\')\" ng-href=\"{{dvs.getLink(item)}}\">\\n    <cb-data-node data=\"dvs.getLinkObject(item)\"></cb-data-node>\\n  </a>\\n  <a ng-if=\"dvs.typeOf(item) === \\'link-object\\'\" ng-class=\"dvs.className(\\'array-list-item-link\\')\" ng-href=\"{{dvs.getLink(item)}}\">\\n    <cb-data-node data=\"dvs.getLinkObject(item)\"></cb-data-node>\\n  </a>\\n  <li ng-repeat-end ng-class=\"dvs.className(\\'array-list-item\\')\" ng-if=\"!dvs.isLink(item)\">\\n    <cb-data-node data=\"item\"></cb-data-node>\\n  </li>\\n</div>';\n\n    return {\n      controller: DataArrayController,\n      replace: true,\n      scope: { array: '<' },\n      template: template\n    };\n  }\n\n  DataArrayController.$inject = ['$scope', 'dataViewService'];\n  function DataArrayController($scope, dataViewService) {\n    $scope.dvs = dataViewService;\n  }\n})();\n'use strict';\n\n// ReSharper disable UndeclaredGlobalVariableUsing\n(function () {\n  'use strict';\n\n  angular.module('cb.dataView').directive('cbDataLinkObject', cbDataLinkObject);\n\n  cbDataLinkObject.$inject = [];\n  function cbDataLinkObject() {\n    var template = '\\n<a ng-class=\"dvs.className(\\'link-object\\')\" ng-href=\"{{dvs.getLink(object)}}\" debug=\"cb-data-link-object\">\\n  <cb-data-node data=\"dvs.getLinkObject(object)\"></cb-data-node>\\n</a>';\n\n    return {\n      controller: DataLinkObjectController,\n      replace: true,\n      scope: { object: '<' },\n      template: template\n    };\n  }\n\n  DataLinkObjectController.$inject = ['$scope', 'dataViewService'];\n  function DataLinkObjectController($scope, dataViewService) {\n    $scope.dvs = dataViewService;\n  }\n})();\n'use strict';\n\n// ReSharper disable UndeclaredGlobalVariableUsing\n(function () {\n  'use strict';\n\n  angular.module('cb.dataView').directive('cbDataLinkString', cbDataLinkString);\n\n  cbDataLinkString.$inject = [];\n  function cbDataLinkString() {\n    var template = '\\n<a ng-class=\"dvs.className(\\'link-string\\')\" ng-href=\"{{dvs.getLink(string)}}\" debug=\"cb-data-link-string\">{{dvs.normalize(string)}}</a>';\n\n    return {\n      controller: DataLinkStringController,\n      replace: true,\n      scope: { string: '<' },\n      template: template\n    };\n  }\n\n  DataLinkStringController.$inject = ['$scope', 'dataViewService'];\n  function DataLinkStringController($scope, dataViewService) {\n    $scope.dvs = dataViewService;\n  }\n})();\n'use strict';\n\n// ReSharper disable UndeclaredGlobalVariableUsing\n(function () {\n  'use strict';\n\n  angular.module('cb.dataView').directive('cbDataNode', cbDataNode);\n\n  cbDataNode.$inject = [];\n  function cbDataNode() {\n    var template = '\\n<cb-data-array array=\"data\" ng-if=\"dvs.typeOf(data) === \\'occupied-array\\'\"></cb-data-array>\\n<cb-data-link-object object=\"data\" ng-if=\"dvs.typeOf(data) === \\'link-object\\'\"></cb-data-link-object>\\n<cb-data-object object=\"data\" ng-if=\"dvs.typeOf(data) === \\'object\\'\"></cb-data-object>\\n<cb-data-link-string string=\"data\" ng-if=\"dvs.typeOf(data) === \\'link-string\\'\"></cb-data-link-string>\\n<cb-data-value value=\"data\" ng-if=\"dvs.isPrimitive(data)\"></cb-data-value>';\n\n    return {\n      controller: DataNodeController,\n      replace: false,\n      scope: { data: '<' },\n      template: template\n    };\n  }\n\n  DataNodeController.$inject = ['$scope', 'dataViewService'];\n  function DataNodeController($scope, dataViewService) {\n    $scope.dvs = dataViewService;\n  }\n})();\n'use strict';\n\n// ReSharper disable UndeclaredGlobalVariableUsing\n(function () {\n  'use strict';\n\n  angular.module('cb.dataView').directive('cbDataObject', cbDataObject);\n\n  cbDataObject.$inject = [];\n  function cbDataObject() {\n    var template = '\\n<ul ng-class=\"dvs.className(\\'object-list\\')\" debug=\"cb-data-object\">\\n  <li ng-class=\"dvs.className(\\'object-list-item\\')\" ng-repeat=\"(key, value) in object track by $index\" ng-switch=\"dvs.typeOf(value)\">\\n\\n    <div ng-class=\"dvs.className(\\'panel-group\\')\" id=\"{{parentId}}\" role=\"tablist\" ng-switch-when=\"occupied-array\" ng-init=\"parentId = dvs.nextId(\\'parent\\'); headingId = dvs.nextId(\\'heading\\'); collapseId = dvs.nextId(\\'collapse\\')\">\\n      <div ng-class=\"dvs.className(\\'panel-item\\')\">\\n        <div ng-class=\"dvs.className(\\'panel-heading\\')\" role=\"tab\" id=\"{{headingId}}\">\\n          <h6 ng-class=\"dvs.className(\\'panel-title\\')\">\\n            <b>\\n              <a ng-class=\"dvs.className(\\'panel-title-link\\')\" role=\"button\" data-toggle=\"collapse\" data-parent=\"#{{parentId}}\" ng-href=\"#{{collapseId}}\" ng-click=\\'$event.preventDefault()\\'>{{dvs.normalize(key)}}</a>\\n            </b>\\n          </h6>\\n        </div>\\n        <div ng-class=\"dvs.className(\\'panel-collapse\\')\" id=\"{{collapseId}}\" role=\"tabpanel\">\\n          <cb-data-array array=\"value\"></cb-data-array>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <b ng-class=\"dvs.className(\\'object-key-link\\')\" ng-switch-when=\"link-string\">\\n      <a ng-href=\"{{dvs.getLink(value)}}\">{{dvs.normalize(key)}}</a>\\n    </b>\\n\\n    <span ng-switch-default>\\n      <b ng-class=\"dvs.className(\\'object-key\\')\">{{dvs.normalize(key)}}: &nbsp;</b>\\n      <cb-data-node data=\"value\" ng-if=\"!dvs.isArray(value)\"></cb-data-node>\\n    </span>\\n  </li>\\n</ul>';\n\n    return {\n      controller: DataObjectController,\n      replace: true,\n      scope: { object: '<' },\n      template: template\n    };\n  }\n\n  DataObjectController.$inject = ['$scope', 'dataViewService'];\n  function DataObjectController($scope, dataViewService) {\n    $scope.dvs = dataViewService;\n  }\n})();\n'use strict';\n\n// ReSharper disable UndeclaredGlobalVariableUsing\n(function () {\n  'use strict';\n\n  angular.module('cb.dataView').directive('cbDataValue', cbDataValue);\n\n  cbDataValue.$inject = [];\n  function cbDataValue() {\n    var template = '\\n<span ng-class=\"dvs.className(\\'value-item\\')\" debug=\"cb-data-value\">{{dvs.normalize(value)}}</span>';\n    return {\n      controller: DataValueController,\n      replace: true,\n      scope: { value: '<' },\n      template: template\n    };\n  }\n\n  DataValueController.$inject = ['$scope', 'dataViewService'];\n  function DataValueController($scope, dataViewService) {\n    $scope.dvs = dataViewService;\n  }\n})();\n'use strict';\n\n// ReSharper disable UndeclaredGlobalVariableUsing\n(function () {\n  'use strict';\n\n  angular.module('cb.dataView').directive('cbDataView', cbDataView);\n\n  cbDataView.$inject = [];\n  function cbDataView() {\n    return {\n      scope: { data: '<' },\n      template: '<cb-data-node data=\"data\"></cb-data-node>'\n    };\n  }\n})();\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// ReSharper disable AssignedValueIsNeverUsed\n// ReSharper disable UnusedParameter\n// ReSharper disable InconsistentNaming\n// ReSharper disable UndeclaredGlobalVariableUsing\n(function () {\n  'use strict';\n\n  angular.module('cb.dataView').provider('dataViewService', DataViewServiceProvider);\n\n  DataViewServiceProvider.$inject = ['lodash'];\n  function DataViewServiceProvider(lodash) {\n    var _settings;\n\n    var prd = this;\n    var classes = 'classes',\n        normalizer = 'normalizer',\n        linkChecker = 'linkChecker',\n        linkGetter = 'linkGetter',\n        linkObjectGetter = 'linkObjectGetter',\n        keyValueSeperator = 'keyValueSeparator';\n\n    var _classes = {\n      'array-list': 'list-group',\n      'array-list-item': 'list-group-item',\n      'array-list-item-link': 'list-group-item',\n      'link-object': 'link-object',\n      'link-string': 'link-string',\n      'object-key': 'object-key',\n      'object-list': 'list-unstyled',\n      'object-list-item': 'object-list-item',\n      'panel-group': 'panel-group',\n      'panel-item': 'panel panel-warning',\n      'panel-heading': 'panel-heading',\n      'panel-title': 'panel-title',\n      'panel-title-link': 'panel-title-link',\n      'panel-collapse': 'panel-collapse collapse in',\n      'value-item': 'value-item'\n    };\n\n    var settings = (_settings = {}, _defineProperty(_settings, classes, _classes), _defineProperty(_settings, normalizer, function (o) {\n      return o !== null && o !== undefined ? lodash.startCase(o.toString()) : '';\n    }), _defineProperty(_settings, linkChecker, function (o) {\n      return false;\n    }), _defineProperty(_settings, linkGetter, function (o) {\n      return null;\n    }), _defineProperty(_settings, linkObjectGetter, function (o) {\n      return o;\n    }), _defineProperty(_settings, keyValueSeperator, '\\t'), _settings);\n\n    prd.className = function (name, value) {\n      return getSet(name, value, settings[classes]);\n    };\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      var _loop = function _loop() {\n        var key = _step.value;\n\n        prd[key] = function (value) {\n          return getSet(key, value);\n        };\n      };\n\n      for (var _iterator = Object.keys(settings)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        _loop();\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    prd.$get = dataViewServiceFactory;\n\n    dataViewServiceFactory.$inject = [];\n    function dataViewServiceFactory() {\n      var ids = {};\n      var svc = {};\n\n      svc.className = function (element) {\n        return settings[classes][element];\n      };\n      svc.normalize = settings[normalizer];\n      svc.isLink = settings[linkChecker];\n      svc.getLink = settings[linkGetter];\n      svc.getLinkObject = settings[linkObjectGetter];\n      svc.keyValueSeparator = function () {\n        return settings[keyValueSeperator];\n      };\n      svc.typeOf = typeOf;\n      svc.isPrimitive = function (data) {\n        return angular.isDefined(data) && !angular.isObject(data);\n      };\n      svc.isArray = function (data) {\n        return angular.isArray(data);\n      };\n      svc.isEmptyArray = function (data) {\n        return svc.isArray(data) && data.length === 0;\n      };\n      svc.isOccupiedArray = function (data) {\n        return svc.isArray(data) && data.length > 0;\n      };\n      svc.isObject = function (data) {\n        return !angular.isArray(data) && angular.isObject(data);\n      };\n      svc.nextId = function (key) {\n        return key + '-' + nextId(key);\n      };\n      svc.lastId = function (key) {\n        return key + '-' + lastId(key);\n      };\n\n      return svc;\n\n      function nextId(key) {\n        return ids[key] = lastId(key) + 1;\n      }\n\n      function lastId(key) {\n        return ids[key] = ids[key] || 1;\n      }\n\n      function typeOf(item) {\n        if (item === null || item === undefined) return 'void';\n        if (angular.isArray(item)) return item.length ? 'occupied-array' : 'empty-array';\n        if (angular.isObject(item)) return settings[linkChecker](item) ? 'link-object' : 'object';\n        if (angular.isString(item) && settings[linkChecker](item)) return 'link-string';\n        return typeof item === 'undefined' ? 'undefined' : _typeof(item);\n      }\n    }\n\n    function getSet(prop, value) {\n      var object = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : settings;\n\n      return angular.isDefined(value) ? object[prop] = value : object[prop];\n    }\n  }\n})();\n\n// cb-data-link-object & cb-data-link-string"]}